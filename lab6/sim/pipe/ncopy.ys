#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 520120910022 徐一宸
# Describe how and why you modified the baseline code.
# 1 Loop unrolling for six time.
# 2 Using registers to avoid data dependency in loop.
# 3 If the number of value in src is less than six, than go to the 
# nop part, which also using loop unrolling to decrease the cost 
# of conditional jmp misprediction.
# 4 Using iaddq instead of addq
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	jmp Loop

Loop1:
	mrmovq (%rdi), %r10
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %rcx
	mrmovq 24(%rdi), %rbx
	mrmovq 32(%rdi), %r9
	mrmovq 40(%rdi), %r8

	andq %r10, %r10
	rmmovq %r10, (%rsi)
	jle Loop2
	iaddq $1, %rax
Loop2:
	andq %r11, %r11
	rmmovq %r11, 8(%rsi)
	jle Loop3
	iaddq $1, %rax
Loop3:
	andq %rcx, %rcx
	rmmovq %rcx, 16(%rsi)
	jle Loop4
	iaddq $1, %rax
Loop4:
	andq %rbx, %rbx
	rmmovq %rbx, 24(%rsi)
	jle Loop5
	iaddq $1, %rax
Loop5:
	andq %r9, %r9
	rmmovq %r9, 32(%rsi)
	jle Loop6
	iaddq $1, %rax
Loop6:
	andq %r8, %r8
	rmmovq %r8, 40(%rsi)
	jle Loop7
	iaddq $1, %rax
Loop7:
	iaddq $48, %rdi
	iaddq $48, %rsi
Loop:
	iaddq $-6, %rdx       # len - 6 >= 0 ?
	jge Loop1

# len <= 6
	iaddq $6, %rdx
	jg Nop
	ret
Nop:
	mrmovq (%rdi), %r10   # get val1
	mrmovq 8(%rdi), %r11  # get val2
	rmmovq %r10, (%rsi)
	andq %r10, %r10
	jle Nop1
	iaddq $1, %rax
Nop1:
	iaddq $-1, %rdx       # len--
	jne Nop2
	ret
Nop2:
	mrmovq 16(%rdi), %r10 # get val3
	rmmovq %r11, 8(%rsi)
	andq %r11, %r11
	jle Nop22
	iaddq $1, %rax
Nop22:
	iaddq $-1, %rdx
	jne Nop3
	ret
Nop3:
	mrmovq 24(%rdi), %r11 # get val4
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle Nop33
	iaddq $1, %rax
Nop33:
	iaddq $-1, %rdx
	jne Nop4
	ret
Nop4:
	mrmovq 32(%rdi), %r10 # get val5
	rmmovq %r11, 24(%rsi)
	andq %r11, %r11
	jle Nop44
	iaddq $1, %rax
Nop44:
	iaddq $-1, %rdx
	jne Nop5
	ret
Nop5:
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jle Done
	iaddq $1, %rax
	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
